# -*- coding: utf-8 -*-
"""TF Certificate Category 1 (강의)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xcUn0NKNKS_36Wn4BV71PkXCdfsycFi_

# TensorFlow 2.0

## 확인

1. GPU 옵션 켜져 있는지 확인할 것!!! (수정 - 노트설정 - 하드웨어설정 (GPU))

## 순서

1. **import**: 필요한 모듈 import
2. **전처리**: 학습에 필요한 데이터 전처리를 수행합니다.
3. **모델링(model)**: 모델을 정의합니다.
4. **컴파일(compile)**: 모델을 생성합니다.
5. **학습 (fit)**: 모델을 학습시킵니다.

아래는 실제 **전처리 - 모델링 - 컴파일 - 학습**으로 이어지는 코드를 보여줍니다.
"""

# 필요한 패키지 import
import numpy as np

# STEP 1: 필요한 모듈 import
import tensorflow as tf
from tensorflow.keras.layers import Dense
from tensorflow.keras.models import Sequential

# STEP 2: 데이터 전처리
xs = np.array([-1.0, 0.0, 1.0, 2.0, 3.0, 4.0], dtype=float)
ys = np.array([5.0, 6.0, 7.0, 8.0, 9.0, 10.0], dtype=float)

# STEP 3: 모델의 정의 (modeling)
model = Sequential([
    Dense(1, input_shape=[1]),
])

# STEP 4: 모델의 생성 (compile)
model.compile(optimizer='sgd', loss='mse')

# STEP 5: 학습 (fit)
model.fit(xs, ys, epochs=1200, verbose=0)

# 검증
# 16.000046
model.predict([10.0])

"""## Category 1

1번 문제는 Basic 한 모델을 다룹니다.
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.layers import Dense
from tensorflow.keras.models import Sequential

xs = np.array([-1.0, 0.0, 1.0, 2.0, 3.0, 4.0], dtype=float)
ys = np.array([5.0, 6.0, 7.0, 8.0, 9.0, 10.0], dtype=float)

"""## 모델 정의 (Sequential)

tensorflow 2.0은 keras의 Sequential 방식과 동일하게 **블록쌓기 방식**으로 매우 쉽게 모델링을 할 수 있습니다.

Dense Layer는 가장 기본적인 **신경망 층**이라고 이해하시면 됩니다.

`Dense` == **Fully Connected Layer** 라고도 불리웁니다.
"""

from IPython.display import Image

Image('https://cs231n.github.io/assets/nn1/neural_net2.jpeg')

"""**Sequential()**은 마치 레고 블록을 쌓듯이 layer을 순서대로 쌓아주면 됩니다.

* 학습 순서는 위에서 아래방향으로 진행됩니다.
* 반드시, 첫번째 layer에는 `input_shape`을 지정해 주어야 합니다.

위의 그림을 모델링 한다면?
"""

model = Sequential([
    Dense(3, input_shape=[1]),
    Dense(4),
    Dense(4),
    Dense(1),
])

"""하지만, 본 문제를 푸는데, 데이터의 **복잡도가 단순**하기 때문에, 아래와같이 Dense의 unit은 1로 지정합니다."""

model = Sequential([
    Dense(1, input_shape=[1]),
])

"""## 컴파일(compile): 적절한 optimizer와 loss 선정하기

우리는 적절한 회귀 값을 예측하는 모델을 만들어야 합니다.

regression(회귀) 예측을 위해서는 loss=`mse`를 선택합니다.

`optimizer`와 `loss`를 지정합니다.

* `optimizer`는 **'sgd'(Stochastic Gradient Descent)**를 지정합니다.
* `loss`는 **'mse'**를 지정합니다.
"""

model.compile(optimizer='sgd', loss='mse')

"""## 학습 (fit)

이제, 모델에 학습을 진행해야합니다. **fit()** 메소드를 활용하여 학습을 진행합니다.

학습시, `feature`, `label` 값 지정 그리고 `epochs`을 지정합니다.
"""

model.fit(xs, ys, epochs=1200, verbose=0)

"""## 예측 (Predict)

Predict로 잘 학습이 되어있는지 검증합니다.
"""

# output
# 16.000046
model.predict([10.0])